LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_unsigned.all;
USE ieee.numeric_std.all;

entity ALU_unit2 is -- ALU unit includes Reg. 3
port ( clk, res : in std_logic ;
Reg1, Reg2: in std_logic_vector(7 downto 0); -- 8-bit inputs A & B from Reg. 1 & Reg. 2
opcode : in std_logic_vector(15 downto 0); -- 8-bit opcode from Decoder
R1, R2 : out std_logic_vector(3 downto 0));
end ALU_unit2 ;

architecture calculation of ALU_unit2 is
signal result : std_logic_vector(7 downto 0);
begin
process ( clk, res )
begin
if res = '1' then
result <= "00000000" ;
elsif (clk'EVENT AND clk = '1') then
case opcode is
when "0000000000000001" => result <= std_logic_vector(unsigned(Reg1) + unsigned(Reg2));
-- Do addition for Reg1 and Reg2
when "0000000000000010" => result <= std_logic_vector(unsigned(Reg1) - unsigned(Reg2));
-- Do subtraction for Reg1 and Reg2
when "0000000000000100" => result <= not(Reg1);
-- Do inverse
when "0000000000001000" => result <= Reg1 nand Reg2;
-- Do Boolean NAND
when "0000000000010000" => result <= Reg1 nor Reg2;
-- Do Boolean NOR
when "0000000000100000" => result <= Reg1 and Reg2;
-- Do Boolean AND
when "0000000001000000" => result <= Reg1 xor Reg2;
-- Do Boolean XOR
when "0000000010000000" => result <= Reg1 or Reg2;
-- Do Boolean OR
when others => result <= "00000000";
-- Donâ€™t care, do nothing
end case ;
end if ;
end process ;
R1 <= result(3 downto 0);
R2 <= result(7 downto 4);
end calculation ;

