LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_unsigned.all;
USE ieee.numeric_std.all;

entity ALU_unit is -- ALU unit includes Reg. 3
port ( 
		clk, res : in std_logic ;
		Reg1, Reg2: in std_logic_vector(7 downto 0); -- 8-bit inputs A & B from Reg. 1 & Reg. 2
		opcode : in std_logic_vector(7 downto 0); -- 8-bit opcode from Decoder
		Result : out std_logic_vector(7 downto 0)
		); -- 8-bit Result
end ALU_unit;

architecture calculation of ALU_unit is
begin
	process ( clk, res )
	begin
		if res = '1' then
			Result <= "00000000" ;
		elsif (clk'EVENT AND clk = '1') then
			case opcode is
				when "00000001" => result <= Reg1 + Reg2;
					-- Do addition for Reg1 and Reg2
				when "00000010" => result <= Reg1 - Reg2;
					-- Do subtraction for Reg1 and Reg2
				when "00000100" => result <= not(Reg1);
					-- Do inverse
				when "00001000" => result <= Reg1 nand Reg2;
					-- Do Boolean NAND
				when "00010000" => result <= Reg1 nor Reg2;
					-- Do Boolean NOR
				when "00100000" => result <= Reg1 and Reg2;
					-- Do Boolean AND 
				when "01000000" => result <= Reg1 xor Reg2;
					-- Do Boolean XOR
				when "10000000" => result <= Reg1 or Reg2;
					-- Do Boolean OR
				when others => result <= "XXXXXXXX";
					-- Donâ€™t care, do nothing
			end case ;
		end if ;
	end process ;
end calculation ;

